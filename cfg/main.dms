container NetworkModel_EU 
{ 
	container MakeUnlinkedData
	{
		parameter<string> Junctions_fss         := 'Ready', ExplicitSuppliers = "SourceData/Infrastructure/TomTom/Generates/Junctions_fss ";
		parameter<string> Streets_fss           := 'Ready', ExplicitSuppliers = "SourceData/Infrastructure/TomTom/Generates/Streets_fss";
		parameter<string> Streets_fss_selection := 'Ready', ExplicitSuppliers = "SourceData/Infrastructure/TomTom/Generates/Streets_fss_selection";
		
		parameter<string> Create_InitialLinkSet := 'Ready', ExplicitSuppliers = "/NetworkSetup/Base_Analysis/NetwerkSpec/CreateInitialWorkingNetwork/LinkSet_Write";
		parameter<string> Create_FinalNodeSet   := 'Ready', ExplicitSuppliers = "/NetworkSetup/Base_Analysis/NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet_Write";
		parameter<string> Create_FinalLinkSet   := 'Ready', ExplicitSuppliers = "/NetworkSetup/Base_Analysis/NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet_Write";
		
	}	
	
	
	#include<ModelParameters.dms>
	#include<units.dms>
	#include<geometries.dms>
	#include<Classifications.dms>
	#include<SourceData.dms>
	#include<NetworkSetup.dms>
	#include<Templates.dms>
	
	container ConfigSettings
	{
		container Overridable
		{
			parameter<String> NetworkModelDataDir        := '%SourceDataDir%/NetworkModel_EU';
		}
	}
	
	container ExportSettings: url = "='#'+ExportSettings/Docdata +'/ExportSettings.adms'"
	{
		container SvnImpl
		{
			parameter<String> RevisionInfoCmd := Replace(Expand(., 'SubWCRev %projDir% > %projDir%/SubWCRevData.str'), '/', '\\');
			parameter<uint32> WriteCode       := exec_ec(Expand(., '%env:ComSpec%'), '/c ' + RevisionInfoCmd, Expand(., '%projdir%'));
		}
		
		container MetaInfo
		{
			parameter<string> FileName : ='%storageBaseName%.xml';
			parameter<string> FileType : ='xml'; // default is 'ini' but ini files cannot be used well to store multi-line properties such as error messages of inproperly configured properties
			container Contents
			{
				container Software
				{
					parameter<string> GeoDmsVersion: [ '=string(GeoDmsVersion())' ];
				}
				container Config
				{
					parameter<string> FullName := '=PropValue(this, '+Quote('FullName')+')';
					parameter<string> Expr     := '=PropValue(this, '+Quote('Expr'    )+')';
				}
				container Environment
				{
					parameter<string> Processor    := expand(., '%env:PROCESSOR_IDENTIFIER%');
					parameter<string> User         := expand(., '%env:USERNAME%');
					parameter<string> ComputerName := expand(., '%env:COMPUTERNAME%');
				}
				container Svn
				{
					parameter<string> RevisionInfo: Storagename = "=(SvnImpl/WriteCode==0)?'%projDir%/SubWCRevData.str':'Error '+String(SvnImpl/WriteCode)+' while producing %projDir%/SubWCRevData.str'";
				}
			}
		}
	}
}
