container NetworkModel_EU 
{ 
	#include<ModelParameters.dms>
	#include<units.dms>
	#include<geometries.dms>
	#include<Classifications.dms>
	#include<SourceData.dms>
	#include<NetworkSetup.dms>
	#include<Analyses.dms>
	#include<Templates.dms>
	
	container RegressieTest : using = "units"
	{
		container t410_NetworkModel_EU_indicator_results_test
		{
			parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
			parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
			parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

			parameter<string> result := 
				'<description>NetworkModel EU results <br><I> git revision: XXXX, git repo: https://github.com/ObjectVision/NetworkModel_EU; branch: RegressieTest) </I></description>' + 
				'<result>' + 
				'<br>count: ' + replace(string(Indicators/count),'.',',') +' <br>' + 
				'mean: ' + replace(string(Indicators/mean),'.',',') +'  <br>' + 
				'max: ' + replace(string(Indicators/max),'.',',') +'<br>' + 
				'min: ' + replace(string(sum(Indicators/min)),'.',',') +' <br>'  + 
				'modus: ' + replace(string(sum(Indicators/modus)),'.',',') +' </result>';

			parameter<string> result_html := result
			,	StorageType = "str"
			,	storagename = "= results_folder + '/t410_NetworkModel_EU_indicator_results_test.txt'";
		}

		container Indicators
		{
			parameter<uint32>   count                  := count(uint32(Result));
			parameter<float32>  mean                   := mean(Result[float32]);
			parameter<float32>  max                    := max(Result[float32]);
			parameter<float32>  min                    := min(Result[float32]);
			parameter<uint32>   modus                  := modus(uint32(Result));
			
			unit<ipoint>     Base_grid             := = 'Geometries/Base_grid_'+ModelParameters/OrgGridsize;
			attribute<min_f> Result0   (Base_grid) := Analyses/Base_Analysis_Traveltime/Indicator/Avg_Traveltime_To_PopulatedCells_grid;
			attribute<min_f> Result    (Base_grid) := Result0 > 0d ? Result0 : null_d;
		}
	}	
	
	
	container ConfigSettings
	{
		container Overridable
		{
			parameter<String> NetworkModelDataDir        := '%SourceDataDir%/\RegressionTests/NetworkModel_EU_regressiontest';
		}
	}
	
	container ExportSettings
	{
		container MetaInfo
		{
			parameter<string> FileName : ='%storageBaseName%.xml';
			parameter<string> FileType : ='xml'; // default is 'ini' but ini files cannot be used well to store multi-line properties such as error messages of inproperly configured properties
			container Contents
			{
				container Software
				{
					parameter<string> GeoDmsVersion: [ '=string(GeoDmsVersion())' ];
				}
				container Config
				{
					parameter<string> FullName := '=PropValue(this, '+Quote('FullName')+')';
					parameter<string> Expr     := '=PropValue(this, '+Quote('Expr'    )+')';
				}
				container Environment
				{
					parameter<string> Processor    := expand(., '%env:PROCESSOR_IDENTIFIER%');
					parameter<string> User         := expand(., '%env:USERNAME%');
					parameter<string> ComputerName := expand(., '%env:COMPUTERNAME%');
				}
				container Parameters
				{
					parameter<string>   OrgGridsize                    := ModelParameters/OrgGridsize;
					parameter<string>   DestGridsize                   := ModelParameters/DestGridsize;
					parameter<string>   MaxTravelTime                  := string(ModelParameters/MaxTravelTime);
					parameter<string>   UseStreetTypeSubset            := string(ModelParameters/UseStreetTypeSubset);
					parameter<string>   Street_OD_ConnectabletSelectie := ModelParameters/Street_OD_ConnectabletSelectie;
					parameter<string>   StreetTypeSubsetSelectie       := ModelParameters/StreetTypeSubsetSelectie;
					parameter<string>   NumberOfItersForNetworkCleanUp := string(ModelParameters/NumberOfItersForNetworkCleanUp);
					parameter<string>   Use_Country_OD_selection       := string(ModelParameters/Use_Country_OD_selection);
					parameter<string>   Roads_path                     := ModelParameters/Roads_path;
					parameter<string>   CountryFolder                  := ModelParameters/CountryFolder;
					parameter<string>   MaxCarSpeed                    := string(ModelParameters/Advanced/MaxCarSpeed);
					parameter<string>   MaxCarSpeed_limit              := string(ModelParameters/Advanced/MaxCarSpeed_limit);
					parameter<string>   CarDefaultSpeed                := string(ModelParameters/Advanced/CarDefaultSpeed);
					parameter<string>   CarDefaultSpeed_low            := string(ModelParameters/Advanced/CarDefaultSpeed_low);
					parameter<string>   ConnectorLinkSpeed             := string(ModelParameters/Advanced/ConnectorLinkSpeed);
					parameter<string>   Ferry_Speed                    := string(ModelParameters/Advanced/Ferry_Speed);
				}
			}
		}
	}
}
