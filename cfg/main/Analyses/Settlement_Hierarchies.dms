Container Settlement_Hierarchies: using = "geography;SourceData;" {
	
	unit<uint32> Centres_Thresholds: nrofrows = 25 
	{
		attribute<min_f>   num     := (float32(id(.)) * 5f)[min_f];
		attribute<s_f> 	   num_s_f := convert(num, s_f);
		attribute<string>  padnum  := num < 10[min_f] ? '0' + string(num) : string(num);
		attribute<string>  ns      := string(num_s_f)+'f';
		attribute<string>  name    := 'L_'+padnum+'m';
		attribute<string>  hname   := 'H_'+padnum+'m';
		attribute<string>  mname   := 'M_'+padnum+'m';
	}
	
	container NetworkRef:= NetworkSetup/Base_Analysis/NetwerkSpec/CreateMoreEfficientNetwork;
	
	unit<uint32> Countries:= select_with_attr_by_cond(RegionalUnits/Country, RegionalUnits/Country/IsEU ||  RegionalUnits/Country/IsEFTA && !RegionalUnits/Country/CNTR_ID = 'SJ' && !RegionalUnits/Country/CNTR_ID = 'IS') 
	{
		attribute<string> ZoneId:= CNTR_ID;
		attribute<EU>	  EU_rel:= IsEU ? 0[EU] : 0 / 0;
		attribute<EUplus> EUplus_rel:= IsEU || IsEFTA ? 0[EUplus] : 0 / 0;
		attribute<Benelux>Benelux_rel:= ZoneId = 'NL' || ZoneId = 'BE' || ZoneId = 'LU' ? 0[Benelux] : 0 / 0;
		attribute<Baltics>Baltics_rel:= ZoneId = 'LT' || ZoneId = 'LV' || ZoneId = 'EE' ? 0[Baltics] : 0 / 0;
	}
	
	unit<uint32> EUplus: nrofrows = 1 
	{
		attribute<BaseProjection> Geometry (poly):= geos_union_polygon(Countries/Geometry, Countries/EUplus_rel)[BaseProjection];
		attribute<string>         ZoneId:= const('EUplus',.,string);
	}
	
	unit<uint32> EU: nrofrows = 1 
	{
		attribute<BaseProjection> Geometry (poly):= geos_union_polygon(Countries/Geometry, Countries/EU_rel)[BaseProjection];
		attribute<string>         ZoneId:= const('EU',.,string);
	}
	
	unit<uint32> Benelux: nrofrows = 1 
	{
		attribute<BaseProjection> Geometry (poly):= geos_union_polygon(Countries/Geometry, Countries/Benelux_rel)[BaseProjection];
		attribute<string>         ZoneId:= const('Benelux',.,string);
	}
	
	unit<uint32> Baltics: nrofrows = 1 
	{
		attribute<BaseProjection> Geometry (poly):= geos_union_polygon(Countries/Geometry, Countries/Baltics_rel)[BaseProjection];
		attribute<string>         ZoneId:= const('Baltics',.,string);
	}
	
	unit<ipoint> pop21_grid := geography/Base_grid_1km 
	{
		attribute<Settlements_v4> SettId     := poly2grid(Settlements_v4/Geometry, .);
		attribute<Settlements_v5> SettId_v5  := poly2grid(Settlements_v5/Geometry, .);
		attribute<BaseProjection> Location   := id(.)[BaseProjection] + (GetProjectionFactor(.) / point(2d, 2d, dpoint))[BaseProjection];
		attribute<BaseProjection> Pop_weight := point(Locations/Population_2021_v2_0/ReadData, Locations/Population_2021_v2_0/ReadData, wpoint)[BaseProjection];
	}
	
	unit<uint32> Settlements_v4:=  Locations/Settlements_v4	 
	{
		attribute<BaseProjection> centroid:= sum(pop21_grid/Location * pop21_grid/Pop_weight, pop21_grid/SettId) / sum(pop21_grid/Pop_weight, pop21_grid/SettId);
		attribute<float32>		  population:= POPL[float32];
		//attribute<string>		  CNTR_CODE:= Locations/Settlements_v4/CNTR_CODE;
		attribute<Countries>	  country_rel:= rlookup(CNTR_CODE, Countries/CNTR_ID);
		attribute<string>		  Label:= name;
		attribute<uint32>	      Type:= degurba[uint32];
		
		parameter<string> refname:= propvalue(., 'name');
		
		//attribute<NetworkRef/FinalNodeSet> Org_NodeId:= NetworkRef/FinalNodeSet/OD_nodes/org_rel[connect(NetworkRef/FinalNodeSet/OD_nodes/Geometry, centroid)];
	}
	unit<uint32> Settlements_v5:=  Locations/Settlements_v5	 
	{
		attribute<BaseProjection> centroid:= sum(pop21_grid/Location * pop21_grid/Pop_weight, pop21_grid/SettId_v5) / sum(pop21_grid/Pop_weight, pop21_grid/SettId_v5);
		attribute<float32>		  population:= POPL[float32];
		//attribute<string>		  CNTR_CODE:= Locations/Settlements_v4/CNTR_CODE;
		attribute<Countries>	  country_rel:= rlookup(CNTR_CODE, Countries/CNTR_ID);
		attribute<string>		  Label:= name;
		attribute<uint32>	      Type:= degurba[uint32];
		
		parameter<string> refname:= propvalue(., 'name');
		
		//attribute<NetworkRef/FinalNodeSet> Org_NodeId:= NetworkRef/FinalNodeSet/OD_nodes/org_rel[connect(NetworkRef/FinalNodeSet/OD_nodes/Geometry, centroid)];
	}
	
	unit<uint32> Settlements_v4_Benelux:= select_with_attr_by_cond(Settlements_v4, Settlements_v4/CNTR_CODE = 'NL' || Settlements_v4/CNTR_CODE = 'BE' || Settlements_v4/CNTR_CODE = 'LU')	
	{
		parameter<string> refname:= propvalue(., 'name');
	}
	
	unit<uint32> Settlements_v4_Baltics:= select_with_attr_by_cond(Settlements_v4, Settlements_v4/CNTR_CODE = 'LT' || Settlements_v4/CNTR_CODE = 'LV' || Settlements_v4/CNTR_CODE = 'EE')	
	{
		parameter<string> refname:= propvalue(., 'name');
	}
	
	container Establish_Settlement_Hierarchies         := Settlement_Hierarchy_T(Settlements_v5, Settlements_v5, NetworkRef);
	container Establish_Settlement_Hierarchies_Benelux := Settlement_Hierarchy_T(Settlements_v4_Benelux, Settlements_v4_Benelux, NetworkRef);
	container Establish_Settlement_Hierarchies_Baltics := Settlement_Hierarchy_T(Settlements_v4_Baltics, Settlements_v4_Baltics, NetworkRef);
	
	Template Settlement_Hierarchy_T
	{
		unit<uint32>      Org;
		unit<uint32>      Dest;
		container         NetwerkSpec;
		///

		unit<uint32> FinalLinkSet := NetwerkSpec/FinalLinkSet;
		unit<uint32> FinalNodeSet := NetwerkSpec/FinalNodeSet;
		
		//attribute<WebMercator>  Org_centroid_wm (Org) := convert(Org/centroid, WebMercator);
		//attribute<FinalNodeSet> Closest_node    (Org) := connect(FinalNodeSet/geometry, Org/centroid);
		attribute<FinalNodeSet> Closest_node    (Org) := FinalNodeSet/OD_nodes/org_rel[connect(FinalNodeSet/OD_nodes/Geometry, Org/centroid)];
		attribute<bool>         Close_enough    (Org) := dist(Org/centroid, FinalNodeSet/geometry[Closest_node]) < 1000d;
		attribute<FinalNodeSet> Org_NodeId      (Org) := Close_enough ? Closest_node : const(0 / 0, Org, FinalNodeSet);
		
		unit<uint32> Unconnected_Settlements:= select_with_org_rel(IsNull(Org_NodeId)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<BaseProjection> centroid := Org/centroid[org_rel];
		}
		
		unit<uint32> Connected_Settlements := select_with_org_rel(IsDefined(Org_NodeId)), dialogdata = "centroid", dialogtype = "map" 
		{
			attribute<BaseProjection>  centroid    := Org/centroid[org_rel];
			attribute<FinalNodeSet>    NodeId      := Org_NodeId[org_rel];
			attribute<float32>         population  := Org/population[org_rel];
			attribute<Countries>       Country_rel := Org/Country_rel[org_rel];
			attribute<string>          Label       := Org/Label[org_rel];
			attribute<uint32>          Type	       := Org/Type[org_rel];
		}
		
		unit<uint64> OD_matrix :=
			impedance_matrix_od64('bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, FinalLinkSet/impedance
				, FinalLinkSet/F1
				, FinalLinkSet/F2
				
				, !FinalLinkSet/IsOneDirection
				, Connected_Settlements/NodeId 
				, Connected_Settlements/NodeId 
				, convert(max(Centres_Thresholds/num), s_f) //cut impedance
			) 
		{
			attribute<float32> pop_i      := Connected_Settlements/population[OrgZone_rel];
			attribute<float32> pop_j      := Connected_Settlements/population[DstZone_rel];
			attribute<bool>    isDomestic := Connected_Settlements/Country_rel[OrgZone_rel] = Connected_Settlements/Country_rel[DstZone_rel];
		}
			
		parameter<string> filepath:= '%LocalDataProjDir%/Settlement_Hierarchy/'+Org/refname;
		
		container thresholds:=
			for_each_nedv(
				Centres_Thresholds/name
				, 'float32(float32(OD_matrix/impedance) <= '+Centres_Thresholds/ns+')'
				, OD_matrix
				, float32);
	
		container biggest_centre_domestic:= 
			for_each_nedva(
				Centres_Thresholds/name+'_d'
				, 'uint32(id(Connected_Settlements) = OD_matrix/DstZone_rel[max_index(OD_matrix/pop_j * OD_matrix/isDomestic[float32] * float32(float32(OD_matrix/impedance) <= '+Centres_Thresholds/ns+'), OD_matrix/OrgZone_rel)])'
				, Connected_Settlements
				, uint32
				, filepath+'.dbf'
			);
		container biggest_centre_crossborder:= 
			for_each_nedva(
				Centres_Thresholds/name+'_a'
				, 'uint32(id(Connected_Settlements) = OD_matrix/DstZone_rel[max_index(OD_matrix/pop_j * float32(float32(OD_matrix/impedance) <= '+Centres_Thresholds/ns+'), OD_matrix/OrgZone_rel)])'
				, Connected_Settlements
				, uint32
				, filepath+'.dbf'
			);
		container market_size_domestic:= 
			for_each_nedva(
				Centres_Thresholds/mname+'_d'
				, 'sum(OD_matrix/pop_j * thresholds/'+Centres_Thresholds/name+' * OD_matrix/isDomestic[float32], OD_matrix/OrgZone_rel)'
				, Connected_Settlements
				, float32
				, filepath+'.dbf'
			);
		container market_concentration_domestic:= 
			for_each_nedva(
				Centres_Thresholds/hname+'_d'
				, 'sum(((OD_matrix/pop_j * thresholds/'+Centres_Thresholds/name+' * OD_matrix/isDomestic[float32]) / market_size_domestic/'+Centres_Thresholds/mname+'_d[OD_matrix/OrgZone_rel])^2f, OD_matrix/OrgZone_rel)'
				, Connected_Settlements
				, float32
				, filepath+'.dbf'
			);
		container market_size_crossborder:= 
			for_each_nedva(
				Centres_Thresholds/mname+'_a'
				, 'sum(OD_matrix/pop_j * thresholds/'+Centres_Thresholds/name+', OD_matrix/OrgZone_rel)'
				, Connected_Settlements
				, float32
				, filepath+'.dbf'
			);
		container market_concentration_crossborder:= 
			for_each_nedva(
				Centres_Thresholds/hname+'_a'
				, 'sum(((OD_matrix/pop_j * thresholds/'+Centres_Thresholds/name+') / market_size_crossborder/'+Centres_Thresholds/mname+'_a[OD_matrix/OrgZone_rel])^2f, OD_matrix/OrgZone_rel)'
				, Connected_Settlements
				, float32
				, filepath+'.dbf'
			);
		
		parameter<bool> Store_Hierarchies  := TRUE, ExplicitSuppliers = "Hierarchies_write; market_size_crossborder; market_size_domestic; market_concentration_crossborder; market_concentration_domestic;";
		
		unit<uint32> Hierarchies_write := Connected_Settlements
		, storagename = "= filepath+'.dbf'" 
		{
			//attribute<BaseProjection> poly (poly) := Org/Geometry[org_rel], storagename = "= filepath+'_poly.shp'";
			attribute<BaseProjection> point       := Org/centroid[org_rel], storagename = "= filepath+'.shp'";
			attribute<string>         Label       := Org/Label[org_rel];
			attribute<uint32>         CountryId   := Country_rel;
			attribute<string>         Country     := makedefined(Countries/CNTR_ID[Country_rel], '');
			attribute<float32>        Pop         := population;
			
			attribute<uint32>         Maxl_d      := = 'max_elem('+AsItemList('(biggest_centre_domestic/'+Centres_Thresholds/name+'_d * uint32('+string(Centres_Thresholds/num)+'))')+')';
			attribute<uint32>         Maxl_a      := = 'max_elem('+AsItemList('(biggest_centre_crossborder/'+Centres_Thresholds/name+'_a * uint32('+string(Centres_Thresholds/num)+'))')+')';
		}
			
		unit<uint32> Hierarchies_ReadOnly 
		: storagename = "= propvalue(Hierarchies_write, 'StorageName')"
		, StorageReadOnly = "true"
		, storagetype = "gdal.vect"
		, StorageReadOnly = "true"
		{
			attribute<BaseProjection>        point : storagename = "= propvalue(Hierarchies_write/point, 'StorageName')", StorageReadOnly = "true";
			//attribute<Connected_Settlements> Connected_Settlements_rel := rlookup(Label, Connected_Settlements/Label);
			attribute<Connected_Settlements> Connected_Settlements_rel := connect(Connected_Settlements/centroid, point);
			attribute<uint32>				 Type					   := Connected_Settlements/Type[Connected_Settlements_rel];
			attribute<FinalNodeSet>          NodeId                    := Connected_Settlements/NodeId[Connected_Settlements_rel];
			attribute<string>                Label; 
			attribute<bool>					 inFUA					   := isdefined(point_in_polygon(point, /SourceData/RegionalUnits/FUA_2021/Geometry));
			parameter<string> 				 refname				   := Org/refname;
		}
	}
}