Container TomTom : Using = "Units;geography;classifications/tomtom"
{
	container Generates
	{
		parameter<string> Junctions_fss         := 'Ready', ExplicitSuppliers = "FSS/Make_Junctions";
		parameter<string> Streets_fss           := 'Ready', ExplicitSuppliers = "FSS/Make_Streets";
		parameter<string> Streets_fss_selection := 'Ready', ExplicitSuppliers = "Selection/Make_Streets_selection";
	}
	container GPKG
	{
		unit<uint32> Junctions
		: StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/src/TomTom_Compiled_Themes_2021.gpkg"
		, StorageType = "gdal.vect"
		, StorageReadOnly = "True"
		, DialogData = "BaseProjection" 
		{
			attribute<BaseProjection> geometry;
		}
		unit<uint32> Streets
		: StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/src/NW2021_SP_streets.gpkg"
		, StorageType = "gdal.vect"
		, StorageReadOnly = "True"
		, DialogData = "BaseProjection" 
		{
			attribute<BaseProjection>    Geometry (arc);
			attribute<FuncRoadClass_EK>  FRC; //Functional Road Class
			attribute<FuncRoadClass>     FRC_rel := (FRC + 1[FuncRoadClass_EK])[FuncRoadClass];
			attribute<float64>           F_JNCTID; //from junction identifier: 
			attribute<float64>           T_JNCTID; //to junction identifier: 
			attribute<float64>           MINUTES; 
			attribute<float64>           METERS; 
			attribute<float64>           KPH; 
			attribute<string>            Oneway; 
		}
	}
	
	container FSS
	{
		unit<uint32> Make_Junctions := GPKG/Junctions
		, StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/EU/TomTom_Compiled_Themes_2021_Junctions.fss"
		{
			attribute<BaseProjection>     Geometry  := GPKG/Junctions/Geometry;
			attribute<uint64>             JNCTID    := GPKG/Junctions/id[uint64];
		}
	
		unit<uint32> Junctions
		: StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/EU/TomTom_Compiled_Themes_2021_Junctions.fss"
		, StorageReadOnly = "True"
		{
			attribute<BaseProjection>     Geometry;
			attribute<uint64>             JNCTID;
			
			attribute<bool>               IsWithinStudyArea := IsDefined(point_in_polygon(geometry, geography/selection_polygon/result/geometry));
		}
	
		container Make_Streets
		: StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/EU/NW2021_SP_streets.fss"
		{
			parameter<uint32>             n                             := #GPKG/Streets;
			attribute<BaseProjection>     Geometry  (GPKG/Streets, arc) := GPKG/Streets/Geometry;
			attribute<FuncRoadClass>      FRC_rel   (GPKG/Streets)      := GPKG/Streets/FRC_rel;
			attribute<uint64>             F_JNCTID  (GPKG/Streets)      := GPKG/Streets/F_JNCTID[uint64];
			attribute<uint64>             T_JNCTID  (GPKG/Streets)      := GPKG/Streets/T_JNCTID[uint64];
			attribute<m>                  METERS    (GPKG/Streets)      := GPKG/Streets/METERS[m];
			attribute<min_f>              MINUTES   (GPKG/Streets)      := GPKG/Streets/MINUTES[min_f];
			attribute<km_hr>              KPH       (GPKG/Streets)      := GPKG/Streets/KPH[km_hr];
			attribute<Directions>         Direction (GPKG/Streets)      := MakeDefined(rlookup(GPKG/Streets/Oneway, Directions/code), 0[Directions]); // relevant voor latere routen (bij direction = 3 moet je f_ en t_ swappen, bij 3 & 4 geldt eenrichtingsverkeer)
			attribute<uint8>              Lanes     (GPKG/Streets)      := GPKG/Streets/Lanes[uint8];
		}
		
		container Read_Streets_container
		: StorageName = "%NetworkModelDataDir%/Infrastructure/TomTom/EU/NW2021_SP_streets.fss"
		, StorageReadOnly = "True"
		{
			parameter<uint32> n;
			
			unit<uint32> domain := range(uint32, 0 , n);
			
			attribute<BaseProjection>     Geometry    (domain, arc);
			attribute<FuncRoadClass>      FRC_rel     (domain);
			attribute<uint64>             F_JNCTID    (domain);
			attribute<uint64>             T_JNCTID    (domain);
			
			attribute<km_hr>              KPH         (domain);
			attribute<m>                  METERS      (domain);
			attribute<min_f>              MINUTES     (domain);
			attribute<Directions>         Direction   (domain);
			attribute<uint8>              Lanes       (domain);
			
			attribute<Junctions>          F_JNCT_rel                         (domain) := rlookup(F_JNCTID, Junctions/JNCTID);
			attribute<bool>               Streets_IsJunctionWithinStudyArea  (domain ):= FSS/Junctions/IsWithinStudyArea[F_JNCT_rel];
			attribute<bool>               Streets_IsStreetTypeSubsetSelectie (domain) := ='FRC_rel <= '+ModelParameters/StreetTypeSubsetSelectie;
			
			attribute<bool>               Streets_Selection_Condition        (domain) := =ModelParameters/UseStreetTypeSubset ? 'Streets_IsStreetTypeSubsetSelectie && Streets_IsJunctionWithinStudyArea' : 'Streets_IsJunctionWithinStudyArea';
		}
		
		unit<uint32> Streets_Selectie   := select_with_attr_by_cond(Read_Streets_container, Read_Streets_container/Streets_Selection_Condition)
		{
			attribute<BaseProjection>     geometry_clean    (arc) := Impl/geometry_clean;
			attribute<uint64>             F_JNCTID_directed       := Direction == Directions/v/backwards ? T_JNCTID : F_JNCTID; // relevant voor latere routen (bij direction = 3 moet je f_ en t_ swappen, bij 3 & 4 geldt eenrichtingsverkeer) --> Comment van Chris
			attribute<uint64>             T_JNCTID_directed       := Direction == Directions/v/backwards ? F_JNCTID : T_JNCTID; // relevant voor latere routen (bij direction = 3 moet je f_ en t_ swappen, bij 3 & 4 geldt eenrichtingsverkeer) --> Comment van Chris
			
			container Impl
			{
				unit<uint32> src := ..;
				attribute<BaseProjection>     geometry_clean        (src, arc) := points2sequence(CleanUp_BeginEndPointLink/seq2points/CleanUpPoints/Point, CleanUp_BeginEndPointLink/seq2points/CleanUpPoints/sequence_rel, CleanUp_BeginEndPointLink/seq2points/CleanUpPoints/NewOrdinal);

				container CleanUp_BeginEndPointLink
 				{
					//// checks
					// #punten per sequence in org moet oneven zijn.
					//parameter<bool> Check_ModuloIsEen           := all(LastOrdinalNr % 2 == 0);
					attribute<bool> ModuloIsEen (src):= LastOrdinalNr % 2 == 0;
					attribute<bool> Circle (src):= first(seq2points/point, seq2points/sequence_rel) = last(seq2points/point, seq2points/sequence_rel);
					// geen dubbele punten binnen sequence rel
					// er mogen geen punten zijn die wel in de org zitten en niet in clean. 
					attribute<uint32> aantal_punten_per_sequence (src) := pcount(seq2points/sequence_rel);
					
					
					attribute<uint32>     LastOrdinalNr       (src)   := last(seq2points/ordinal, seq2points/sequence_rel);
					attribute<uint32>     LastRelevantOrdinal (src)   := ModuloIsEen && Circle ? LastOrdinalNr / 2 : LastOrdinalNr;//, IntegrityCheck = "Check_ModuloIsEen";
					
					unit<uint32> seq2points := sequence2points(src/geometry)
					{
						// attribute<bool>       IsLastRelevantOrdinal := LastRelevantOrdinal == Ordinal;
						attribute<bool>       IsRelevant          := Ordinal <= LastRelevantOrdinal[sequence_rel]; //links are doubled, we only want one-way links. CJC: modification, only cutting when it is certain the link is two-way. 

						unit<uint32> CleanUpPoints := select_with_attr_by_cond(seq2points, seq2points/IsRelevant)
						{
							attribute<Directions> Direction             := src/Direction[sequence_rel];
							attribute<uint32>     ReversedOrdinal       := LastRelevantOrdinal[sequence_rel] - Ordinal;
							attribute<uint32>     NewOrdinal            := Direction == Directions/v/backwards ? ReversedOrdinal : Ordinal;
						}
					}
				}
			}
		}
	}
	
	container Selection
	{
		container Make_Streets_selection := FSS/Streets_Selectie
		, StorageName = "=ModelParameters/Roads_path"
		{
			attribute<BaseProjection>     geometry       (FSS/Streets_Selectie, arc) := FSS/Streets_Selectie/geometry_clean;
			attribute<FuncRoadClass>      FRC_rel        (FSS/Streets_Selectie)      := FSS/Streets_Selectie/FRC_rel;
			attribute<uint64>             F_JNCTID       (FSS/Streets_Selectie)      := FSS/Streets_Selectie/F_JNCTID_directed[uint64];
			attribute<uint64>             T_JNCTID       (FSS/Streets_Selectie)      := FSS/Streets_Selectie/T_JNCTID_directed[uint64];
			attribute<m>                  METERS         (FSS/Streets_Selectie)      := FSS/Streets_Selectie/METERS[m];
			attribute<min_f>              MINUTES        (FSS/Streets_Selectie)      := FSS/Streets_Selectie/MINUTES[min_f];
			attribute<km_hr>              KPH            (FSS/Streets_Selectie)      := FSS/Streets_Selectie/KPH[km_hr];
			attribute<Directions>         Direction      (FSS/Streets_Selectie)      := FSS/Streets_Selectie/Direction;
			attribute<uint8>			  Lanes			 (FSS/Streets_Selectie)      := FSS/Streets_Selectie/Lanes;	
			
			parameter<uint32>             n                                          := #FSS/Streets_Selectie;
		}
		
		container Read_Streets_selection
		: StorageName = "=ModelParameters/Roads_path"
		, StorageReadOnly = "True"
		{
			
			unit<uint32> domain := range(uint32, 0 , n);
			
			attribute<BaseProjection>     Geometry       (domain, arc);
			attribute<FuncRoadClass>      FRC_rel        (domain);
			attribute<uint64>             F_JNCTID       (domain);
			attribute<uint64>             T_JNCTID       (domain);
			
			attribute<m>                  METERS         (domain);
			attribute<min_f>              MINUTES        (domain);
			attribute<km_hr>              KPH            (domain);
			attribute<Directions>         Direction      (domain);
			attribute<uint8>              Lanes          (domain);
			
			parameter<uint32>             n;
		}
	}
	
	unit<uint32> Junctions := FSS/Junctions;
	unit<uint32> Streets   := Selection/Read_Streets_selection/domain
	{
		attribute<BaseProjection>     Geometry       (arc) := Selection/Read_Streets_selection/Geometry;
		attribute<FuncRoadClass>      FRC_rel              := Selection/Read_Streets_selection/FRC_rel;
		attribute<uint64>             F_JNCTID             := Selection/Read_Streets_selection/F_JNCTID;
		attribute<uint64>             T_JNCTID             := Selection/Read_Streets_selection/T_JNCTID;
		
		attribute<km_hr>              KPH                  := Selection/Read_Streets_selection/KPH;
		attribute<m>                  METERS               := Selection/Read_Streets_selection/METERS;
		attribute<min_f>              MINUTES              := Selection/Read_Streets_selection/MINUTES;
		attribute<Directions>         Direction            := Selection/Read_Streets_selection/Direction; // relevant voor latere routen (bij direction = 3 moet je f_ en t_ swappen, bij 3 & 4 geldt eenrichtingsverkeer) --> Comment van Chris
		attribute<uint8>              Lanes                := Selection/Read_Streets_selection/Lanes; 
		attribute<bool>               IsOneDirection       := Direction == Directions/v/backwards || Direction == Directions/v/forwards;
		attribute<bool>               Connectable          := ='FRC_rel != '+ModelParameters/Street_OD_ConnectabletSelectie+' && !IsOneDirection';
		
		attribute<BaseProjection>     fromPoint            := first_point(geometry);
		attribute<BaseProjection>     toPoint              := last_point(geometry);
		
		attribute<bool>               DualCarriageWay      := IsOneDirection ? Lanes > 1b : Lanes > 3b;
		
		attribute<RegioRoadCategory>  RRC_rel              := makedefined(FuncRoadClass/RRC_rel[FRC_rel], DualCarriageWay ? RegioRoadCategory/V/Motorways_and_other_main_roads : RegioRoadCategory/V/Secondary_roads);
		
	}
}

