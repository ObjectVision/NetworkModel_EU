container RegionalUnits : using = "geography"
{ 
	unit<uint32> NUTS 
	: StorageName = "%NetworkModelDataDir%/Regions/Nuts0.shp"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<LambertEA> geometry (poly);
		attribute<bool>      IsEU            := IsDefined(geometry);
	}

	unit<uint32> NUTS3 
	: StorageName = "%NetworkModelDataDir%/Regions/Nuts3.shp"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<LambertEA> geometry (poly);
		// attribute<bool>      IsEU            := IsDefined(geometry) && TAA != 0i;
		// attribute<bool>      IsEUplusBalkan  := IsDefined(geometry);
		// attribute<bool>      IsWater         := TAA == 7i;
		attribute<string>    label           := NUTS_CODE;

		unit<uint32> CalcCentroids := .
		{
			attribute<float64> W          := sum(Population/pop, Population/NUTS3_rel);
			
			attribute<float64> Weighted_X := sum(Population/x * Population/pop, Population/NUTS3_rel);
			attribute<float64> Weighted_Y := sum(Population/y * Population/pop, Population/NUTS3_rel);
			
			attribute<float64> mean_X     := Weighted_X / W;
			attribute<float64> mean_Y     := Weighted_y / W;
			 
			attribute<LambertEA> weighted_centroid0            := point_xy(mean_X, mean_Y, LambertEA);
			attribute<bool>      IsWeighted_centroid_in_nuts3  := IsDefined(point_in_polygon(weighted_centroid0, NUTS3/geometry));
			attribute<LambertEA> weighted_centroid             := IsWeighted_centroid_in_nuts3 ? weighted_centroid0 : centroid_or_mid(NUTS3/geometry);
			attribute<LambertEA> geometry                      := weighted_centroid;
			
			attribute<spoint>                              Base_grid_1km_spoint_rel ;
			
			unit<uint64> Population := SourceData/Locations/wPopulation
			{
				attribute<NUTS3>   NUTS3_rel := point_in_polygon(geometry, NUTS3/geometry);
				attribute<float64> x         := pointcol(geometry);
				attribute<float64> y         := pointrow(geometry);
				attribute<float64> pop       := SourceData/Locations/wPopulation/Population[float64];
			}
			
			unit<uint32> Export_NUTS3_Centroids := CalcCentroids
			{
				attribute<LambertEA> geometry     := CalcCentroids/geometry;
				attribute<string>    NUTS_CODE    := CalcCentroids/NUTS_CODE;
			}
		}
	}
	
	unit<uint32> Country 
	: StorageName = "%NetworkModelDataDir%/Regions/CNTR_RG_01M_2020_3035.shp"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<LambertEA> geometry (poly);
		attribute<bool>      IsEU            := EU_STAT == 'T'; 
		attribute<bool>      IsEFTA          := EFTA_STAT == 'T'; 
		attribute<bool>      IsCC            := CC_STAT == 'T'; 
		attribute<bool>      IsTerritory       := strcount(SVRG_UN, 'Territory') > 0; 
		unit<uint32> Subset := select_with_attr_by_cond(.,(ModelParameters/Use_Country_OD_selection ? name_engl == /ModelParameters/OD_SelectionCountry : IsEu || IsEFTA))
		{
			attribute<LambertEA>    geometry_BB (poly, BoundingBox) := points2sequence(BoundingBox/point_set/point, BoundingBox/point_set/Sequence_rel, BoundingBox/point_set/ordinal);
			
			unit<UInt32> BoundingBox : NrOfRows = 1
			{
				parameter<LambertEA> bottom_left  := first(lower_bound(geometry));
				parameter<LambertEA> top_right    := first(upper_bound(geometry));
				parameter<LambertEA> top_left     := point_xy(Get_X(bottom_left),Get_Y(top_right), LambertEA);
				parameter<LambertEA> bottom_right := point_xy(Get_X(top_right),Get_Y(bottom_left), LambertEA);
				
				unit<UInt32> point_set    : NrOfRows = 5
				{
					attribute<LambertEA> point        := union_data(., top_left, top_right, bottom_right, bottom_left, top_left);
					attribute<..>        Sequence_rel := const(0, .);
					attribute<.>         ordinal      := id(.);
				}
			}
		}
	}
	
	unit<uint32> Country_Split := geos_split_union_polygon(Country/geometry, id(Country))
	{
		attribute<LambertEA> geometry_lea (poly) := geometry[LambertEA];
		attribute<LambertEA> centroid            := centroid_or_mid(geometry_lea);
		attribute<bool>      IsEU                := Country/IsEU[part_rel];
		attribute<bool>      IsEFTA              := Country/IsEFTA[part_rel];
		attribute<bool>      IsTerritory         := Country/IsTerritory[part_rel];
		attribute<bool>      IsWithinStudyArea   := IsDefined(point_in_polygon(centroid, geography/selection_polygon/geometry));
		attribute<string>    name                := Country/name_engl[part_rel];
	}

	unit<uint32> EUplus         := select_with_attr_by_cond(Country, (Country/IsEU || Country/IsEFTA) && !Country/IsTerritory);
	
	unit<uint32> Continental_EU_undissolved := select_with_org_rel((Country_Split/IsEU || Country_Split/IsEFTA) && !Country_Split/IsTerritory && Country_Split/IsWithinStudyArea)
	{
		attribute<LambertEA>      geometry        (poly) := Country_Split/geometry_lea[org_rel];
		attribute<string>         name                   := Country_Split/name[org_rel];
		attribute<Continental_EU> Continental_EU_rel     := rlookup(name, Continental_EU/values);
		
	}
	
	unit<uint8> Continental_EU := unique_uint8(Continental_EU_undissolved/name)
	{
		attribute<LambertEA>       geometry (poly) := geos_union_polygon(Continental_EU_undissolved/geometry, Continental_EU_undissolved/Continental_EU_rel);
		attribute<string>          name            := values;
		attribute<string>          label           := values;
		attribute<Country/Subset>  Country_rel     := rlookup(name, Country/Subset/name_engl);
		attribute<string>          country_id      := Country/Subset/CNTR_ID[Country_rel];
	}
}
