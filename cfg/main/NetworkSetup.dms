container NetworkSetup : using = "units;geometries;SourceData;Classifications"
{
	unit<uint32> Dest_populated_grid := ='select_with_attr_by_cond(Geometries/Base_grid_'+ModelParameters/DestGridsize+'/points, Geometries/Base_grid_'+ModelParameters/DestGridsize+'/points/population > 0)';


	container Base_Analysis := =
		'Perform_OD_Analysis_T('
			'Geometries/Base_grid_'+ModelParameters/OrgGridsize+'/points'   //Org
			',Dest_populated_grid' //Dest
			',''PopRaster'''
		')';
	
	//Analysis for Felipe
	container Pop_Weighted_NUTS_centroids := =
		'Perform_OD_Analysis_T('
			'SourceData/RegionalUnits/NUTS3/CalcCentroids'   //Org
			',SourceData/RegionalUnits/NUTS3/CalcCentroids' //Dest
			',''PopW_NUTS'''
		')';
	
	
	Template Perform_OD_Analysis_T
	{
		unit<uint32>      Org;
		unit<uint32>      Dest;
		parameter<string> ProjName;
		///
		
		container NetwerkSpec :=
			Templates/CreateNetwork_T(
				  org
				, dest
				, SourceData/Infrastructure/TomTom/Streets 
				, SourceData/Infrastructure/TomTom/Junctions 
			);
		
		parameter<uint32> maxSqrDist := 120 * 120; //km blokken
		
		container Indicator_Lewis
		{
			unit<uint32> FinalLinkSet := NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet;
			unit<uint32> FinalNodeSet := NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet;
			unit<ipoint> Base_grid    := = 'Geometries/Base_grid_'+ModelParameters/OrgGridsize;
			
			// gemiddelde reistijden berekenen binnen een 120km eudclidisch straal voor alle 1km celletjes in de EU naar gridcellen met populatie/
			// cut waarde van 4 uur
			// EU27 + Zwitserland + Lichtenstein + Noorwegen
			parameter<s_f> max_sec := convert(ModelParameters/MaxTravelTime, s_f);
			
			unit<uint64> Numerator_Di :=
				impedance_matrix_od64('bidirectional(link_flag);startPoint(Node_rel,OrgZone_loc);endPoint(Node_rel,DstZone_loc);cut(OrgZone_max_imp);euclid(maxSqrDist);interaction(v_i,w_j,dist_decay):D_i'
					, FinalLinkSet/impedance
					, FinalLinkSet/F1
					, FinalLinkSet/F2
					
					, !FinalLinkSet/IsOneDirection
					, FinalNodeSet/OrgNode_rel, NetwerkSpec/OrgLocations_spoint //startPoint(Node_rel,OrgZone_loc)
					, FinalNodeSet/DestNode_rel, NetwerkSpec/destLocations_spoint //endPoint(Node_rel,DstZone_loc)
					, convert(ModelParameters/MaxTravelTime, s_f) //cut impedance
					, maxSqrDist
					, 1.0 // v_i
					, NetwerkSpec/DestDomain/Population[float64] // w_j
					, -1.0 // dist_deacy
				), KeepData = "True";
			unit<uint64> Denominator_Di :=
				impedance_matrix_od64('bidirectional(link_flag);startPoint(Node_rel,OrgZone_loc);endPoint(Node_rel,DstZone_loc);cut(OrgZone_max_imp);euclid(maxSqrDist);interaction(v_i,w_j,dist_decay):D_i'
					, FinalLinkSet/impedance
					, FinalLinkSet/F1
					, FinalLinkSet/F2
					
					, !FinalLinkSet/IsOneDirection
					, FinalNodeSet/OrgNode_rel, NetwerkSpec/OrgLocations_spoint //startPoint(Node_rel,OrgZone_loc)
					, FinalNodeSet/DestNode_rel, NetwerkSpec/destLocations_spoint //endPoint(Node_rel,DstZone_loc)
					, convert(ModelParameters/MaxTravelTime, s_f) //cut impedance
					, maxSqrDist
					, 1.0 // v_i
					, NetwerkSpec/DestDomain/Population[float64] // w_j
					, 0.0 // dist_deacy
				), KeepData = "True";
				
			attribute<min_f> Avg_Traveltime_To_PopulatedCells (NetwerkSpec/OrgDomain) := MakeDefined(convert(Numerator_Di/D_i[s_f] / Denominator_Di/D_i, min_f), 0[min_f]);
			
			attribute<min_f>   Numerator_grid                        (Base_grid) := convert(Numerator_Di/D_i[s_f],min_f)[invert(Base_grid/points/grid_domain_rel)], StorageName = "='%LocalDataProjDir%/Output/Numerator_grid-'+ModelParameters/CountryFolder+'.tif'";
			attribute<float64> Denominator_grid                      (Base_grid) := Denominator_Di/D_i[invert(Base_grid/points/grid_domain_rel)], StorageName = "='%LocalDataProjDir%/Output/Denominator_grid-'+ModelParameters/CountryFolder+'.tif'";
			attribute<min_f>   Avg_Traveltime_To_PopulatedCells_grid (Base_grid) := Avg_Traveltime_To_PopulatedCells[invert(Base_grid/points/grid_domain_rel)], StorageName = "='%LocalDataProjDir%/Output/Avg_Traveltime_To_PopulatedCells_grid-'+ModelParameters/CountryFolder+'.tif'";

			parameter<string> Generator_Network1 := 'Ready', ExplicitSuppliers = "NetwerkSpec/CreateInitialWorkingNetwork/LinkSet_Write";
			parameter<string> Generator_Network2 := 'Ready', ExplicitSuppliers = "NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet_Write;NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet_Write";
			parameter<string> Generator := 'Ready', ExplicitSuppliers = "Numerator_grid;Denominator_grid;Avg_Traveltime_To_PopulatedCells_grid";
		}
		
		
		container Basic_OD_matrix
		{
			unit<uint32> FinalLinkSet := NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet;
			unit<uint32> FinalNodeSet := NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet;
			
			unit<uint64> Dijkstra_fullOD := //calculation a full origin-destination matrix
				dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);od:impedance,OrgZone_rel,DstZone_rel'
					, FinalLinkSet/impedance
					, FinalLinkSet/F1
					, FinalLinkSet/F2
					
					, FinalNodeSet/OrgNode_rel
					, FinalNodeSet/DestNode_rel
				)
			{
				attribute<string> impedance_min := string(round(impedance / 60d)); //Convert the impedance from seconds to minutes, round it off, and store it as a string value.
				
				unit<uint32> Matrix_Array := org
				{
					attribute<string> org_name           := org/label;
					attribute<string> impedance_min_list := AsList(impedance_min, ';', OrgZone_rel);
				}

				unit<uint32> Header : nrofrows = 1
				{
					attribute<string> values := AsList(dest/label, ';', const(0[Header],dest));
				}

				unit<uint32> Matrix_met_header := union_unit(Header, Matrix_Array) //This unit can easily be exported to csv and used in other applications.
				, StorageName  = "%LocalDataProjDir%/Export/NUTS3_PopWeighted_Centroids_OD_matrix_20230804.csv"
				, StorageType  = "gdalwrite.vect"
				{
					attribute<string> org_name := union_data(., const('',Header), Matrix_Array/org_name);
					attribute<string> values   := union_data(., Header/values, Matrix_Array/impedance_min_list) ;
				}
			}
		}
		
		parameter<string> Generator_Network1 := 'Ready', ExplicitSuppliers = "NetwerkSpec/CreateInitialWorkingNetwork/LinkSet_Write";
		parameter<string> Generator_Network2 := 'Ready', ExplicitSuppliers = "NetwerkSpec/CreateMoreEfficientNetwork/FinalNodeSet_Write;NetwerkSpec/CreateMoreEfficientNetwork/FinalLinkSet_Write";
	}
	
	#include<ComputeProxy.dms>
	
}
