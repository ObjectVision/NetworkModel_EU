container Templates: Using = "Units;Classifications;geometries;Classifications/TomTom"
{
	Template CreateNetwork_T
	{
		// begin case parameters
		unit<uint32> OrgDomain0;
		unit<uint32> DestDomain0;
		unit<uint32> RoadDomain0;
		unit<uint32> JunctionDomain;
		// end case parameters

		unit<uint32> OrgDomain := OrgDomain0
		{
			attribute<UniqueLocations> UniqueLocations_rel := rlookup(ipoint(geometry), ipoint(UniqueLocations/geometry));
		}
		
		unit<uint32> DestDomain := DestDomain0
		{
			attribute<UniqueLocations> UniqueLocations_rel := rlookup(ipoint(geometry), ipoint(UniqueLocations/geometry));
		}
		
		attribute<BaseProjection>                      OrgLocations  (OrgDomain)      := orgDomain/geometry;
		attribute<BaseProjection>                      destLocations (DestDomain)     := destDomain/geometry;
		attribute<spoint>                              OrgLocations_spoint  (OrgDomain)      := orgDomain/Base_grid_1km_spoint_rel ;
		attribute<spoint>                              destLocations_spoint (DestDomain)     := destDomain/Base_grid_1km_spoint_rel ;
		
		unit<uint32> Locations := union_unit(orgDomain, destDomain)
		{
			attribute<BaseProjection>                  geometry                       := union_data(.,orgLocations, destLocations);
			attribute<spoint>                          as_spoint                      := union_data(.,OrgLocations_spoint, destLocations_spoint);
			attribute<bool>                            IsOrg                          := union_data(.,const(TRUE , OrgDomain), const(FALSE,DestDomain));
			attribute<bool>                            IsDest                         := union_data(.,const(FALSE, OrgDomain), const(TRUE ,DestDomain));
			attribute<uint32>                          Population                     := union_data(.,OrgDomain/Population, DestDomain/Population);
		}
		
		unit<uint32> UniqueLocations    := unique(Locations/geometry) 
		{ 
			attribute<BaseProjection>               geometry       := values;
			attribute<Locations>                    Locations_rel  := rlookup(geometry, Locations/geometry);
			attribute<OrgDomain>                    OrgDomain_rel  := rlookup(geometry, OrgLocations);
			attribute<DestDomain>                   DestDomain_rel := rlookup(geometry, DestLocations);
			attribute<bool>                         IsOrg          := rjoin(geometry, Locations/geometry, Locations/IsOrg);
			attribute<uint32>                       Population     := Locations/Population[Locations_rel];
		}
		
		
		container CreateInitialWorkingNetwork
		{
			unit<uint32> Roads_with_unconnected_subnetworks := RoadDomain0
			{
				attribute<NodeSet_src>            Fsrc_1                   := rlookup(F_JnctId, NodeSet_src/JnctIds);
				attribute<NodeSet_src>            Fsrc_2                   := rlookup(T_JnctId, NodeSet_src/JnctIds);
				
				unit<uint32> PointSet := union_unit(., .)
				{
					attribute<uint64>           JnctIds      := union_data(., F_JnctId, T_JnctId); 
					attribute<BaseProjection>   Points       := union_data(., fromPoint, toPoint);
					attribute<BaseProjection>   geometry     := points;
				}
				
				unit<uint32> NodeSet_src := unique(PointSet/JnctIds)
				{
					attribute<BaseProjection>   geometry           := PointSet/geometry[rlookup(JnctIds, PointSet/JnctIds)];
					attribute<uint64>           JnctIds            := values;
				}
			
				container Connectiveness := Templates/Check_Connectiveness_T(.,NodeSet_src, Fsrc_1, Fsrc_2);
			}
			
			attribute<bool> Roads_isConnected (Roads_with_unconnected_subnetworks) := Roads_with_unconnected_subnetworks/Connectiveness/IsVerbonden;

			unit<uint32> Road_linestrings := select(Roads_isConnected)
			{
				attribute<BaseProjection>     geometry (arc) := collect_by_cond(.,Roads_isConnected, Roads_with_unconnected_subnetworks/geometry);
				attribute<bool>               IsOneDirection := collect_by_cond(.,Roads_isConnected, Roads_with_unconnected_subnetworks/IsOneDirection);
				attribute<km_hr>              KPH            := collect_by_cond(.,Roads_isConnected, Roads_with_unconnected_subnetworks/KPH);
				attribute<Bool >              Connectable    := collect_by_cond(.,Roads_isConnected, Roads_with_unconnected_subnetworks/Connectable);
			}
			
			unit<uint32> Roads := arc2segm(Road_linestrings/geometry)
			{
				attribute<km_hr>              KPH                  := sequence_rel->KPH;
				attribute<bool>               IsOneDirection       := sequence_rel->IsOneDirection;
				attribute<bool>               Connectable          := sequence_rel->Connectable;
				unit<uint32> PointSet := union_unit(., .)
				{
					attribute<BaseProjection>   geometry     := union_data(., point, NextPoint);
				}
				unit<uint32> UqGeomPointSet := unique(PointSet/geometry)
				{ 
					attribute<BaseProjection> geometry := values;
				}
				attribute<UqGeomPointSet> F1 := rlookup(point, UqGeomPointSet/values);
				attribute<UqGeomPointSet> F2 := rlookup(nextpoint, UqGeomPointSet/values);
				
				// for checking and visualisation only
				container Connectiveness := Templates/Check_Connectiveness_T(.,UqGeomPointSet, F1, F2);
				attribute<BaseProjection> geometry(arc) := points2sequence(PointSet/geometry, convert(id(PointSet) % #., .));
			}
		
			unit<uint32> LinkSet_Calc := connect_ne(Roads/geometry, uint32(Roads/Connectable), UniqueLocations/geometry, const(0, UniqueLocations))
			{
				attribute<BaseProjection>  geometry(arc);
			}
			
			unit<uint32> LinkSet_Write := LinkSet_Calc,	StorageName = "= '%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/Linkset.fss'"
			{
				attribute<km_hr>           KPH            := MakeDefined(arc_rel->KPH, ModelParameters/Advanced/CarDefaultSpeed_low);
				attribute<bool>            IsOneDirection := arc_rel->IsOneDirection;
				attribute<BaseProjection>  first_point    := first_point(geometry); //OD point   --> vanwege directions hoeft deze niet te klopppen...
				attribute<BaseProjection>  last_point     := last_point(geometry);  //May or may not be an existing network node, otherwise it is a new node
			}
			
			unit<uint32> LinkSet_Read: StorageName = "= '%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/Linkset.fss'", StorageReadOnly = "True"
			{
				attribute<km_hr>           KPH;
				attribute<bool>            IsOneDirection;
				attribute<BaseProjection>  first_point;
				attribute<BaseProjection>  last_point;
			}
			
			unit<uint32> LinkSet := LinkSet_Read
			{
				attribute<km>              LengthKm       := convert(dist(first_point, last_point)[m], km);
				attribute<min_f>           Minutes        := MakeDefined(convert((LengthKm / KPH), min_f), 0.0001[min_f]);
				attribute<s_f>             impedance      := convert(minutes, s_f) + Float64(CorrectImpedanceForCrossroads/impedance_Start + CorrectImpedanceForCrossroads/impedance_End);
				attribute<NodeSet>         F1             := rlookup(first_point, NodeSet/Values); //node from the OD towards the network
				attribute<NodeSet>         F2             := rlookup(last_point,  NodeSet/Values); //network node to which the the OD is connected 
 
				unit<uint32> PointSet := union_unit(., .);
			}

			unit<uint32> NodeSet := unique(union_data(LinkSet/PointSet, LinkSet/first_point, LinkSet/last_point))
			{
				attribute<BaseProjection> geometry := values;
				attribute<uint32> NrConnectedLinks := pcount(LinkSet/F1) + pcount(LinkSet/F2);
			}
						
 			container CorrectImpedanceForCrossroads
			// hiermee wordt voor ieder begin en eind node het aantal geconnecte links bepaald
			// dit bepaalt of het een bocht (2 links), zijweg (3 links), kruising (4 links) of complexe kruising (meer dan 4 links) is
			// afhankelijk van dit aantal wordt een aantal seconden opgeteld bij de totale impedance
			{
				// helft van de opgegeven waarden omdat er zowel bij begin als einde een factor wordt opgeteld
				parameter<s>       Impedance2Links    := 0[s];
				parameter<s>       Impedance3Links    := 2[s];
				parameter<s>       Impedance4Links    := 5[s];
				parameter<s>       Impedance_gt4Links := 6[s];

				attribute<uint32>  Start (LinkSet)     := NodeSet/NrConnectedLinks[LinkSet/F1];
				attribute<uint32>  End   (LinkSet)     := NodeSet/NrConnectedLinks[LinkSet/F2];
			
				attribute<s> impedance_Start (LinkSet):=
					switch(
						 case(Start <= 2, Impedance2Links)
						,case(Start  = 3, Impedance3Links)
						,case(Start  = 4, Impedance4Links)
						,Impedance_gt4Links
					);
			
				attribute<s> impedance_End (LinkSet):=
					switch(
						 case(End <= 2, Impedance2Links)
						,case(End  = 3, Impedance3Links)
						,case(End  = 4, Impedance4Links)
						,Impedance_gt4Links
					);
			}
  		}
		
		container CreateMoreEfficientNetwork
		{
			unit<uint8> Iter := range(uint8, 0[uint8], ModelParameters/NumberOfItersForNetworkCleanUp)
			{
				attribute<string> name := 'Iter_'+string(id(.));
				attribute<string> prevname := MakeDefined(name[ID(.)-1b], 'Start');
				attribute<string> Label := name, DialogType = "LabelText";
				attribute<uint32> nrofarc_na_iter := ='union_data(., '+AsList('OptimiseNetwork/'+name+'/IntermediateLinkSet/count_arcs', ',')+')'; 
			}
			
			unit<uint32> LinkSet_src     := CreateInitialWorkingNetwork/LinkSet;
			unit<uint32> NodeSet_src     := CreateInitialWorkingNetwork/NodeSet
			{
//				attribute<BaseProjection_ip> geometry      := CreateInitialWorkingNetwork/NodeSet/geometry;
				// attribute<bool>              WillBeDeleted := (pcount(FinalLinkSet/F1) + pcount(FinalLinkSet/F2)) == 0;
			}

			unit<uint64> Nodeset_x_NodeSet := combine_unit_uint64(NodeSet_src, NodeSet_src);
			
			container OptimiseNetwork := 
				for_each_ne(
					Iter/name
					, 'OptimiseNetwork_T('+quote(Iter/name)+')'
				)
			{
				container LastIter := =last(Iter/name);
			}
			
			
			unit<uint32> FinalNodeSet_Calc := select_with_org_rel(pcount(LastLinkSet/F1)+pcount(LastLinkSet/F2) > 0);
			unit<uint32> FinalNodeSet_Write := FinalNodeSet_Calc
				,	StorageName = "='%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/FinalNodeSet.fss'"
			{
				attribute<BaseProjection> geometry := org_rel->values;				
			}
			
			unit<uint32> LastLinkSet := OptimiseNetwork/LastIter/IntermediateLinkSet;
			unit<uint32> FinalLinkSet_Write := LastLinkSet,	StorageName = "='%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/FinalLinkSet.fss'"
			{
				attribute<FinalNodeSet_Calc> F1             := invert(FinalNodeSet_Calc/org_rel)[LastLinkSet/F1];
				attribute<FinalNodeSet_Calc> F2             := invert(FinalNodeSet_Calc/org_rel)[LastLinkSet/F2];
				attribute<s_f>               Impedance      := LastLinkSet/Impedance;
				attribute<km>                LengthKm       := LastLinkSet/LengthKm;
				attribute<bool>              IsOneDirection := LastLinkSet/IsOneDirection;
			}
			
			unit<uint32> FinalNodeSet : StorageName = "='%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/FinalNodeSet.fss'", StorageReadOnly = "True"
			{
				attribute<BaseProjection> geometry;
				attribute<.> OrgNode_rel  (OrgDomain)  := rlookup(OrgDomain/geometry,  geometry);
				attribute<.> DestNode_rel (DestDomain) := rlookup(DestDomain/geometry, geometry);	
			}
			
			unit<uint32> FinalLinkSet_Read: StorageName = "='%LocalDataProjDir%/'+ProjName+'/'+ModelParameters/CountryFolder+'/FinalLinkSet.fss'", StorageReadOnly = "True"
			{
				attribute<FinalNodeSet> F1;
				attribute<FinalNodeSet> F2;
				attribute<s_f>          Impedance;
				attribute<km>           LengthKm;
				attribute<bool>         IsOneDirection;
			}
			unit<uint32> FinalLinkSet := FinalLinkSet_Read
			{
				attribute<bool>         IsOneDirection := FinalLinkSet_Read/IsOneDirection;
				// For visualisation
				attribute<BaseProjection>                  FirstPoint                     := FinalNodeSet/Geometry[F1];
				attribute<BaseProjection>                  LastPoint                      := FinalNodeSet/Geometry[F2];
				attribute<BaseProjection>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
				unit<uint32> PointSet := union_unit(.,.)
				{
					attribute<BaseProjection>              Point   := Union_Data(., ../FirstPoint, ../LastPoint);
					attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
					attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
				}
				container Connectiveness := Templates/Check_Connectiveness_T_adhoc(.,FinalNodeSet, F1, F2);
			}
			
			
			Template OptimiseNetwork_T
			{
				parameter<string> IterName;
				///
				unit<uint32> PrevIntermediateLinkSet := =IterName != 'Iter_0' ? Iter/prevname[rlookup(IterName, Iter/name)]+'/IntermediateLinkSet' : 'LinkSet_src';
				
				unit<uint32> UniqueLocations := NetwerkSpec/UniqueLocations
				{
					attribute<NodeSet> Node_rel       := rlookup(geometry, NodeSet/Values); 
				}
				
				unit<uint32> LinkSet := PrevIntermediateLinkSet
				{
					attribute<bool>                            IsPartOfJunctionFreeSection    := NodeSet/WillBeDeleted[F1] || NodeSet/WillBeDeleted[F2];
					attribute<bool>                            IsInsideJunctionFreeSection    := NodeSet/WillBeDeleted[F1] && NodeSet/WillBeDeleted[F2];
					attribute<bool>                            IsOnBorderOfJunctionFreeSection:= IsPartOfJunctionFreeSection && !IsInsideJunctionFreeSection;
					attribute<bool>                            IsFinalLink                    := !IsPartOfJunctionFreeSection;
					attribute<bool>                            IsOneDirection                 := PrevIntermediateLinkSet/IsOneDirection;
					
					// For visualisation
					// attribute<BaseProjection_ip>                  FirstPoint                     := NodeSet/geometry[F1];
					// attribute<BaseProjection_ip>                  LastPoint                      := NodeSet/geometry[F2];
					// attribute<BaseProjection_ip>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					// unit<uint32> PointSet := union_unit(.,.)
					// {
						// attribute<BaseProjection_ip>              Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						// attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						// attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					// }
				}
				
				unit<uint32> NodeSet  := NodeSet_src
				{
					attribute<uint32>                          NrConnectedLinks               := pcount(LinkSet/F1) + pcount(LinkSet/F2);
					attribute<bool>                            BordersWithOneDirectionalRoad  := LinkSet/IsOneDirection[invert(LinkSet/F1)] || LinkSet/IsOneDirection[invert(LinkSet/F2)];
					attribute<bool>                            WillBeDeleted                  := NrConnectedLinks == 2 && pcount(UniqueLocations/Node_rel) == 0; // 2 connectinglinks means intermediary without junction, and if there are no node_rel's then it is not an OD-point.,
					
					//Forward relations
					attribute<JunctionFreeSection>             JunctionFreeSection_rel        := ConnectedParts/JunctionFreeSection_rel[ConnectedParts_rel];
					
					attribute<ConnectedParts>                  ConnectedParts_rel             := ConnectedParts/PartNr;
					
					attribute<bool>                            IsOrgDest_location             := IsDefined(rlookup(values, UniqueLocations/Values));
					attribute<uint32>                          NrConnectedLinks_in_LinkSet_cleanedforJFS := pcount(LinkSet_cleanedforJFS/F1) + pcount(LinkSet_cleanedforJFS/F2);
					attribute<bool>                            IsDeadEnd_and_NotOD            := NrConnectedLinks_in_LinkSet_cleanedforJFS == 1 && !IsOrgDest_location;
				}

				unit<uint32> LinksInsideJunctionFreeSection := select(LinkSet/IsInsideJunctionFreeSection), Descr = "Those links that are in the junction free section"
				{
					attribute<s_f>                             impedance                      := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/impedance);
					attribute<km>                              LengthKm                       := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/LengthKm);
					attribute<NodeSet>                         F1                             := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/F1);
					attribute<NodeSet>                         F2                             := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/F2); 
					attribute<bool>                            IsOneDirection                 := collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/IsOneDirection); 
					attribute<JunctionFreeSection>             JunctionFreeSection_rel        := NodeSet/JunctionFreeSection_rel[F1];
					
					//For visualisation
					// attribute<BaseProjection_ip>                  geometry  (arc)                :=  collect_by_cond(LinksInsideJunctionFreeSection, LinkSet/IsInsideJunctionFreeSection, LinkSet/geometry);
				}
				
				unit<uint32> ConnectedParts := connected_parts(LinksInsideJunctionFreeSection/F1, LinksInsideJunctionFreeSection/F2)
				{
					attribute<NodeSet>                         FirstNode_rel                   := invert(PartNr);
					attribute<bool>                            IsJunctionFreeSection           := NodeSet/WillBeDeleted[FirstNode_rel];
					attribute<JunctionFreeSection>             JunctionFreeSection_rel         := recollect_by_cond(ConnectedParts/IsJunctionFreeSection, ID(JunctionFreeSection));
				}
				
				unit<uint32> ConnectorLink := select_with_org_rel(LinkSet/IsOnBorderOfJunctionFreeSection)
				, Descr = "Those links that connect the unchanged links with the junction free links"
				{
					attribute<NodeSet>                         F1                             := LinkSet/F1[org_rel];
					attribute<NodeSet>                         F2                             := LinkSet/F2[org_rel]; 
					attribute<bool>                            is_F1_deleted                  := NodeSet/WillBeDeleted[F1];
					attribute<NodeSet>                         F_keep                         := is_F1_deleted ? F2 : F1; // Unchanged Node
					attribute<NodeSet>                         F_delete                       := is_F1_deleted ? F1 : F2; // Node in JunctionFreeSection
					attribute<JunctionFreeSection>             JunctionFreeSection_rel        := NodeSet/JunctionFreeSection_rel[F_delete];
					attribute<NodeSet>                         NodeSet_rel                    := F_keep;
					attribute<s_f>                             Impedance                      := LinkSet/Impedance[org_rel];
					attribute<km>                              LengthKm                       := LinkSet/LengthKm[org_rel];
					attribute<bool>                            IsOneDirection                 := LinkSet/IsOneDirection[org_rel];
				}
				
				
				unit<uint32> JunctionFreeSection := select(ConnectedParts/IsJunctionFreeSection)
				, Descr = "Those nodes that are redundant, because there are no junctions on the links"
				{
					attribute<ConnectorLink>                   First_ConnectorLink_rel        := min(id(ConnectorLink), ConnectorLink/JunctionFreeSection_rel); //todo sneller
					attribute<ConnectorLink>                   Last_ConnectorLink_rel         := max(id(ConnectorLink), ConnectorLink/JunctionFreeSection_rel); //todo sneller
					attribute<bool>                            IsDisconnected                 := First_ConnectorLink_rel > Last_ConnectorLink_rel;
					
					attribute<s_f>                             Aggregated_Impedence           := sum(LinksInsideJunctionFreeSection/impedance, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					attribute<s_f>                             First_ConnectorLink_Impedance  := ConnectorLink/Impedance[First_ConnectorLink_rel];
					attribute<s_f>                             Last_ConnectorLink_Impedance   := ConnectorLink/Impedance[Last_ConnectorLink_rel];
					attribute<s_f>                             Total_Impedance                := Aggregated_Impedence + First_ConnectorLink_Impedance + Last_ConnectorLink_Impedance;
					
					attribute<km>                              Aggregated_LengthKm            := sum(LinksInsideJunctionFreeSection/LengthKm, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					attribute<km>                              First_ConnectorLink_LengthKm   := ConnectorLink/LengthKm[First_ConnectorLink_rel];
					attribute<km>                              Last_ConnectorLink_LengthKm    := ConnectorLink/LengthKm[Last_ConnectorLink_rel];
					attribute<km>                              Total_LengthKm                 := Aggregated_LengthKm + First_ConnectorLink_LengthKm + Last_ConnectorLink_LengthKm;
					
					attribute<NodeSet>                         F1                             := ConnectorLink/NodeSet_rel[First_ConnectorLink_rel];
					attribute<NodeSet>                         F2                             := ConnectorLink/NodeSet_rel[Last_ConnectorLink_rel];  
					
					attribute<bool>                            First_ConnectorLink_IsOneDirection := ConnectorLink/IsOneDirection[First_ConnectorLink_rel];
					attribute<bool>                            Last_ConnectorLink_IsOneDirection  := ConnectorLink/IsOneDirection[Last_ConnectorLink_rel];
					attribute<bool>                            Links_InsideJFS_IsOneDirection     := all(LinksInsideJunctionFreeSection/IsOneDirection, LinksInsideJunctionFreeSection/JunctionFreeSection_rel);
					
					attribute<bool>                            IsOneDirection                     := First_ConnectorLink_IsOneDirection && Last_ConnectorLink_IsOneDirection && Links_InsideJFS_IsOneDirection;
					
					//For visualisation
					// attribute<BaseProjection_ip>                  FirstPoint                     := NodeSet/Geometry[F1];
					// attribute<BaseProjection_ip>                  LastPoint                      := NodeSet/Geometry[F2];
					// attribute<BaseProjection_ip>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					// unit<uint32> PointSet := union_unit(.,.)
					// {
						// attribute<BaseProjection_ip>              Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						// attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						// attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					// }
				}
				unit<uint32> DisconnectedJunctionFreeSection := select_with_attr_by_cond(JunctionFreeSection, JunctionFreeSection/IsDisconnected);
				
				unit<uint32> UnchangedLinkSet := select_with_org_rel(LinkSet/IsFinalLink) //todo sneller zonder org_rel
				, Descr = "Those links that can be used without changes, i.e. no nodes need to be removed"
				{
					attribute<NodeSet>                         F1                             := LinkSet/F1[org_rel];
					attribute<NodeSet>                         F2                             := LinkSet/F2[org_rel];
					attribute<s_f>                             impedance                      := LinkSet/impedance[org_rel];
					attribute<km>                              LengthKm                       := LinkSet/LengthKm[org_rel];
					attribute<bool>                            IsOneDirection                 := LinkSet/IsOneDirection[org_rel];
					
					//For visualisation
					// attribute<BaseProjection_ip>                  FirstPoint                     := NodeSet/geometry[F1];
					// attribute<BaseProjection_ip>                  LastPoint                      := NodeSet/geometry[F2];
					// attribute<BaseProjection_ip>                  geometry (arc)                 := points2sequence(PointSet/Point, PointSet/SeqNr, PointSet/Ordinal);
					// unit<uint32> PointSet := union_unit(.,.)
					// {
						// attribute<BaseProjection_ip>              Point   := Union_Data(., ../FirstPoint, ../LastPoint);
						// attribute<..>                          SeqNr   := value(id(.) % nrofrows(..), ..);
						// attribute<uint32>                      Ordinal := id(.) / nrofrows(..);
					// }
				}
				
				
				unit<uint32> LinkSet_cleanedforJFS := union_unit(UnchangedLinkSet, JunctionFreeSection)
				, Descr = "The final link set"
				{
					attribute<NodeSet>                         F1                             := union_data(., UnchangedLinkSet/F1, JunctionFreeSection/F1);
					attribute<NodeSet>                         F2                             := union_data(., UnchangedLinkSet/F2, JunctionFreeSection/F2);
					attribute<s_f>                             impedance_org                  := union_data(., UnchangedLinkSet/impedance, JunctionFreeSection/Total_Impedance);
					attribute<s_f>                             impedance                      := MakeDefined(Find_DuplicateLinks/min_impedance[Find_DuplicateLinks_rel],impedance_org);
					attribute<km>                              LengthKm                       := union_data(., UnchangedLinkSet/LengthKm, JunctionFreeSection/Total_LengthKm);
					attribute<bool>                            IsOneDirection                 := union_data(., UnchangedLinkSet/IsOneDirection, JunctionFreeSection/IsOneDirection);
					
					attribute<bool>                            IsLinkWithDeadEnd              := NodeSet/IsDeadEnd_and_NotOD[F1] || NodeSet/IsDeadEnd_and_NotOD[F2];
					attribute<bool>                            IsLinkConnectedWithItself      := F1 == F2;
					attribute<bool>                            IsDuplicateLink                := Find_DuplicateLinks/IsDuplicateLink[Find_DuplicateLinks_rel] && id(.) != Find_DuplicateLinks/FirstLink[Find_DuplicateLinks_rel];
					
					attribute<bool>                            ToBeOmitted                    := (IsLinkWithDeadEnd || IsLinkConnectedWithItself || IsDuplicateLink) && !IsOneDirection;
					
					attribute<Nodeset_x_NodeSet>               Nodeset_x_NodeSet_rel          := combine_data(Nodeset_x_NodeSet, min_elem(F1, F2), max_elem(F1,F2));
					attribute<Find_DuplicateLinks>             Find_DuplicateLinks_rel        := rlookup(Nodeset_x_NodeSet_rel, Find_DuplicateLinks/values);

					unit<uint32> Find_DuplicateLinks := unique(Nodeset_x_NodeSet_rel)
					{
						attribute<uint32>                    count_occurence := pcount(Find_DuplicateLinks_rel);
						attribute<bool>                      IsDuplicateLink := count_occurence > 1;
						attribute<s_f>                       min_impedance   := min(../impedance_org, Find_DuplicateLinks_rel);
						attribute<..>                        FirstLink       := first(id(..), Find_DuplicateLinks_rel);
					}
					
					//For visualisation
					// unit<uint32> PointSet := union_unit(.,.);
					// attribute<BaseProjection_ip>                  geometry (arc)                 := points2sequence(Union_Data(PointSet, NodeSet/geometry[F1], NodeSet/geometry[F2]), value(id(PointSet) %., .));
				}
				
				//Verwijder links naar dead ends (if F1 or F2 occurs only once in all F1/F2, and not being OD-location)
				unit<uint32> IntermediateLinkSet := select(!LinkSet_cleanedforJFS/ToBeOmitted)
				{
					attribute<NodeSet> F1 := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/F1);
					attribute<NodeSet> F2 := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/F2);
		
					attribute<s_f>     Impedance      := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/impedance);
					attribute<km>      LengthKm       := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/LengthKm);
					attribute<bool>    IsOneDirection := collect_by_cond(., !LinkSet_cleanedforJFS/ToBeOmitted, LinkSet_cleanedforJFS/IsOneDirection);
					
					parameter<uint32>  count_arcs := #.;
					
					//For visualisation
					unit<uint32> PointSet := union_unit(.,.);
					attribute<BaseProjection> geometry (arc) := points2sequence(Union_Data(PointSet, NodeSet/geometry[F1], NodeSet/geometry[F2]), value(id(PointSet) %#IntermediateLinkSet, IntermediateLinkSet));
				}
			}
		}
 	}
	
	Template Check_Connectiveness_T
	{
		unit<uint32> LinkSet_domain;
		unit<uint32> NodeSet_domain;
		attribute<NodeSet_domain> F1(LinkSet_domain);
		attribute<NodeSet_domain> F2(LinkSet_domain);
		///
		
		unit<uint32> Networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes   := pcount(PartNr);
			parameter<Networks> Main       := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<bool>     IsConnected (NodeSet_domain) := PartNr == Main;
		}
		
		attribute<bool> IsVerbonden (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/IsConnected)
		{
			attribute<BaseProjection>        geometry := org_rel -> geometry;
		}
	}
	
	Template Check_Connectiveness_T_adhoc
	{
		unit<uint32> LinkSet_domain;
		unit<uint32> NodeSet_domain;
		attribute<NodeSet_domain> F1(LinkSet_domain);
		attribute<NodeSet_domain> F2(LinkSet_domain);
		///
		
		attribute<bool>                      IsVerbonden  (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];
		unit<uint32> Networks:= connected_parts(LinkSet_domain/F1, LinkSet_domain/F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes   := pcount(PartNr);
			parameter<Networks> Main       := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<bool>     IsConnected   (NodeSet_domain) := PartNr == Main;
		}

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/Isconnected)
		{
			// attribute<BaseProjection> geometry := org_rel -> values;
		}
	}
}


